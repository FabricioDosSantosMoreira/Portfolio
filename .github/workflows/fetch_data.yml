name: Fetch Data

on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * 0'

jobs:
  fetch-data:
    runs-on: ubuntu-latest
    env:
      API_ACESS_TOKEN: ${{ secrets.API_ACESS_TOKEN }}

    steps:
      - name: Check Out Repository
        uses: actions/checkout@v3

      - name: Set Up Git
        run: |
          echo "Setting Up Git..."

          # Set Up Git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global pull.rebase true

          echo "Set Up Git Complete!"

      - name: Clear Old Repo Data Files
        run: |
          echo "Clearing Old Data Files..."

          # Remove Old Data Files
          rm -f "./docs/data/repo_data.json"
          rm -f "./docs/data/github_color_data.json"

          echo "Old Data Files Cleared!"

      - name: Commit and Push Changes
        run: |
          echo "Committing and Pushing Changes..."

          # Current Date Time Variable
          _datetime=$(TZ="UTC" date +"%d/%m/%Y %H:%M") 

          # Commit and Push Changes
          git add './docs/data/github_color_data.json'
          git commit --allow-empty -m "[REMOVE] - github_color_data.json ($_datetime)"
        
          git add './docs/data/repo_data.json'
          git commit --allow-empty -m "[REMOVE] - repo_data.json ($_datetime)"
      
          git pull
          git push

          echo "Changes Committed and Pushed!"

      - name: Fetch Repository Data Using GitHub GraphQL API
        run: |
          echo "Fetching GitHub Repository Data..."

          # Variables
          OWNER="FabricioDosSantosMoreira"
          EXCLUDED_REPOS=(
            "dio-lab-open-source" 
            "alura-challenge-amigo-secreto"
          )

          RESPONSE=$(curl -X POST -H "Authorization: Bearer $API_ACESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"query\": \"{ user(login: \\\"$OWNER\\\") { repositories(first: 100) { nodes { name } } } }\"}" \
            https://api.github.com/graphql
          )

          # Extracts the repository names and stores them in an array
          REPO_NAMES=($(echo "$RESPONSE" | jq -r '.data.user.repositories.nodes[].name'))

          # Open 'repo_data.json' with a '['
          echo "[" > "./docs/data/repo_data.json"

          # Iterates over the repositories and compares with the excluded list
          for NAME in "${REPO_NAMES[@]}"; do
            if [[ ! " ${EXCLUDED_REPOS[@]} " =~ " ${NAME} " ]]; then
              RESPONSE=$(curl -X POST -H "Authorization: Bearer $API_ACESS_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{\"query\": \"{ repository(owner: \\\"$OWNER\\\", name: \\\"$NAME\\\") { name description url homepageUrl openGraphImageUrl stargazers { totalCount } forks { totalCount } watchers { totalCount } languages(first: 100) { edges { node { name } size } } } }\"}" \
                https://api.github.com/graphql
              )

              # Adds 'RESPONSE' to 'repo_data.json'
              echo "$RESPONSE" | jq ".data.repository" >> "./docs/data/repo_data.json"
                  
              # Adds a ',' to 'repo_data.json' to separate objects
              echo "," >> "./docs/data/repo_data.json"
            else
              echo "Skipped Repository: $NAME"
            fi
          done

          # Removes the last ',' and closes 'repo_data.json' with a ']'
          sed -i '$ s/,$//' "./docs/data/repo_data.json"
          echo "]" >> "./docs/data/repo_data.json"

          echo "GitHub Repository Data Fetched!"

      - name: Fetch Color Data Using CURL
        run: |
          echo "Fetching GitHub Colors JSON..."

          # NOTE: Repository Containing GitHub's Programming Languages Colors JSON.
          if curl -f -o "./docs/data/github_color_data.json" https://raw.githubusercontent.com/ozh/github-colors/master/colors.json; then
            echo "GitHub Colors JSON Fetched!"
          else
            echo "Failed to Fetch GitHub Colors JSON!"
          fi

      - name: Verify Data Files
        run: |
          echo "Verifying Data Files..."

          if [ -f "./docs/data/repo_data.json" ]; then
            echo "Repository Data File Verified!"
          else
            echo "Repository Data File Not Found!"
          fi

          if [ -f "./docs/data/github_color_data.json" ]; then
            echo "GitHub Color Data File Verified!"
          else
            echo "GitHub Color Data File Not Found!"
          fi

          echo "Data Files Verified!"

      - name: Commit and Push Data
        run: |
          echo "Committing and Pushing Data..."

          # Current Date Time Variable
          _datetime=$(TZ="UTC" date +"%d/%m/%Y %H:%M") 

          # Commit and Push Data
          git add "./docs/data/repo_data.json"
          git commit --allow-empty -m "[UPDATE] - repo_data.json ($_datetime)"

          git add "./docs/data/github_color_data.json"
          git commit --allow-empty -m "[UPDATE] - github_color_data.json ($_datetime)"

          git pull
          git push

          echo "Data Committed and Pushed!"
          